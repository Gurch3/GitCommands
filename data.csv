git config --list : When you run "git config --list", Git will list all Git configuration settings for the current level in a readable list. The list includes the configuration variables and their values.;
git config --global user.name "": The command "git config --global user.name ''" sets an empty string as the value for the "user.name" configuration property in Git on your local machine. This means that when you make commits in Git, the name associated with those commits will be an empty string, rather than your actual name.;
git init: The "git init" command is used to initialize a new Git repository in a directory. When you run "git init" in a directory, Git creates a new repository in that directory and sets up the necessary Git files and directories, including a .git subdirectory, which contains the repository metadata.;
git add filename-here: This command adds a specific file to the staging area in Git, preparing it to be committed.;
git add: This command adds all the changes made in the repository to the staging area.;
git add file*: This command adds all the files in the current directory that start with "file" to the staging area.;
git status: This command displays the current state of the repository, showing which files are staged, unstaged, or untracked.;
git commit: This command creates a new commit with the changes that are currently in the staging area.;
git commit -m "message": This command creates a new commit with a commit message specified in quotes, avoiding the need to open a text editor.;
git log: This command displays a list of all the commits made in the repository, showing the commit ID, author, date, and commit message.;
git show commit-id: This command displays the details of a specific commit, including the commit message and the changes made in that commit.;
git diff: This command shows the difference between the changes made in the working directory and the changes that are currently in the staging area.;
git add -p: This command adds changes to the staging area interactively, prompting the user for each change and allowing them to choose which changes to add.;
git rm filename: This command removes a file from both the working directory and the repository.;
git mv oldfile newfile: This command renames a file in the repository, updating the file in the working directory and creating a new commit with the rename operation.;
git checkout filename: Discards changes made to a specific file in the working directory and replaces it with the version of the file from the most recent commit.;
git reset HEAD filename: Unstages changes made to a specific file in the staging area that have not yet been committed.;
git commit --amend: Combines staged changes with the previous commit, effectively allowing you to modify the most recent commit message or add additional changes.;
git revert HEAD: Creates a new commit that undoes the changes made in the most recent commit.;
git revert comit_id_here: Creates a new commit that undoes the changes made in the specified commit.;
git branch branch_name: : Creates a new branch with the specified name.;
git checkout branch_name: Switches to the specified branch.;
git branch: Lists all branches in the repository.;
git branch -d branch_name: Deletes the specified branch.;
git merge branch_name: : Merges changes from the specified branch into the current branch.;
git merge --abort: Aborts the current merge operation.;
git add remote https://repo-here: Adds a remote repository with the specified URL.;
git remote -v: Lists all remote repositories associated with the current repository.;
git push : Pushes local changes to a remote repository.;
git pull: Fetches changes from a remote repository and merges them into the current branch.; 